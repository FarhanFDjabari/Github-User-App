package com.example.githubuserssubmission.core.helper

import com.example.githubuserssubmission.core.data.source.local.entity.GithubUserEntity
import com.example.githubuserssubmission.core.data.source.remote.response.GithubUserResponse
import com.example.githubuserssubmission.core.domain.model.GithubUser

object DataMapper {
    fun mapResponsesToEntities(input: List<GithubUserResponse>) : List<GithubUserEntity> {
        val githubUserList = ArrayList<GithubUserEntity>()
        input.map {
            val gu = GithubUserEntity(
                gistsUrl = it.gistsUrl,
                reposUrl = it.reposUrl,
                followingUrl = it.followingUrl,
                twitterUsername = it.twitterUsername,
                bio = it.bio,
                createdAt = it.createdAt,
                login = it.login,
                type = it.type,
                blog = it.blog,
                subscriptionsUrl = it.subscriptionsUrl,
                updatedAt = it.updatedAt,
                siteAdmin = it.siteAdmin,
                company = it.company,
                id = it.id?: 0,
                publicRepos = it.publicRepos,
                gravatarId = it.gravatarId,
                email = it.email,
                organizationsUrl = it.organizationsUrl,
                hireable = it.hireable,
                starredUrl = it.starredUrl,
                followersUrl = it.followersUrl,
                publicGists = it.publicGists,
                url = it.url,
                receivedEventsUrl = it.receivedEventsUrl,
                followers = it.followers,
                avatarUrl = it.avatarUrl,
                eventsUrl = it.eventsUrl,
                htmlUrl = it.htmlUrl,
                following = it.following,
                name = it.name,
                location = it.location,
                nodeId = it.nodeId,
                isFavorite = false,
            )
            githubUserList.add(gu)
        }
        return githubUserList
    }

    fun mapResponseToEntities(input: GithubUserResponse): GithubUserEntity {
        return GithubUserEntity(
            gistsUrl = input.gistsUrl,
            reposUrl = input.reposUrl,
            followingUrl = input.followingUrl,
            twitterUsername = input.twitterUsername,
            bio = input.bio,
            createdAt = input.createdAt,
            login = input.login,
            type = input.type,
            blog = input.blog,
            subscriptionsUrl = input.subscriptionsUrl,
            updatedAt = input.updatedAt,
            siteAdmin = input.siteAdmin,
            company = input.company,
            id = input.id ?: 0,
            publicRepos = input.publicRepos,
            gravatarId = input.gravatarId,
            email = input.email,
            organizationsUrl = input.organizationsUrl,
            hireable = input.hireable,
            starredUrl = input.starredUrl,
            followersUrl = input.followersUrl,
            publicGists = input.publicGists,
            url = input.url,
            receivedEventsUrl = input.receivedEventsUrl,
            followers = input.followers,
            avatarUrl = input.avatarUrl,
            eventsUrl = input.eventsUrl,
            htmlUrl = input.htmlUrl,
            following = input.following,
            name = input.name,
            location = input.location,
            nodeId = input.nodeId,
            isFavorite = false,
        )
    }

    fun mapEntitiesToDomain(input: List<GithubUserEntity>): List<GithubUser> =
        input.map {
            GithubUser(
                gistsUrl = it.gistsUrl,
                reposUrl = it.reposUrl,
                followingUrl = it.followingUrl,
                twitterUsername = it.twitterUsername,
                bio = it.bio,
                createdAt = it.createdAt,
                login = it.login,
                type = it.type,
                blog = it.blog,
                subscriptionsUrl = it.subscriptionsUrl,
                updatedAt = it.updatedAt,
                siteAdmin = it.siteAdmin,
                company = it.company,
                id = it.id,
                publicRepos = it.publicRepos,
                gravatarId = it.gravatarId,
                email = it.email,
                organizationsUrl = it.organizationsUrl,
                hireable = it.hireable,
                starredUrl = it.starredUrl,
                followersUrl = it.followersUrl,
                publicGists = it.publicGists,
                url = it.url,
                receivedEventsUrl = it.receivedEventsUrl,
                followers = it.followers,
                avatarUrl = it.avatarUrl,
                eventsUrl = it.eventsUrl,
                htmlUrl = it.htmlUrl,
                following = it.following,
                name = it.name,
                location = it.location,
                nodeId = it.nodeId,
                isFavorite = it.isFavorite
            )
        }

    fun mapEntityToDomain(input: GithubUserEntity): GithubUser =
            GithubUser(
                gistsUrl = input.gistsUrl,
                reposUrl = input.reposUrl,
                followingUrl = input.followingUrl,
                twitterUsername = input.twitterUsername,
                bio = input.bio,
                createdAt = input.createdAt,
                login = input.login,
                type = input.type,
                blog = input.blog,
                subscriptionsUrl = input.subscriptionsUrl,
                updatedAt = input.updatedAt,
                siteAdmin = input.siteAdmin,
                company = input.company,
                id = input.id,
                publicRepos = input.publicRepos,
                gravatarId = input.gravatarId,
                email = input.email,
                organizationsUrl = input.organizationsUrl,
                hireable = input.hireable,
                starredUrl = input.starredUrl,
                followersUrl = input.followersUrl,
                publicGists = input.publicGists,
                url = input.url,
                receivedEventsUrl = input.receivedEventsUrl,
                followers = input.followers,
                avatarUrl = input.avatarUrl,
                eventsUrl = input.eventsUrl,
                htmlUrl = input.htmlUrl,
                following = input.following,
                name = input.name,
                location = input.location,
                nodeId = input.nodeId,
                isFavorite = input.isFavorite
            )

    fun mapDomainToEntity(input: GithubUser) = GithubUserEntity(
        gistsUrl = input.gistsUrl,
        reposUrl = input.reposUrl,
        followingUrl = input.followingUrl,
        twitterUsername = input.twitterUsername,
        bio = input.bio,
        createdAt = input.createdAt,
        login = input.login,
        type = input.type,
        blog = input.blog,
        subscriptionsUrl = input.subscriptionsUrl,
        updatedAt = input.updatedAt,
        siteAdmin = input.siteAdmin,
        company = input.company,
        id = input.id ?: 0,
        publicRepos = input.publicRepos,
        gravatarId = input.gravatarId,
        email = input.email,
        organizationsUrl = input.organizationsUrl,
        hireable = input.hireable,
        starredUrl = input.starredUrl,
        followersUrl = input.followersUrl,
        publicGists = input.publicGists,
        url = input.url,
        receivedEventsUrl = input.receivedEventsUrl,
        followers = input.followers,
        avatarUrl = input.avatarUrl,
        eventsUrl = input.eventsUrl,
        htmlUrl = input.htmlUrl,
        following = input.following,
        name = input.name,
        location = input.location,
        nodeId = input.nodeId,
        isFavorite = input.isFavorite
    )
}